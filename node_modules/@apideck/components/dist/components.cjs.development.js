'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var classNames = _interopDefault(require('classnames'));
var react = require('@headlessui/react');
var reactDom = require('react-dom');
var useClipboardCopy = require('use-clipboard-copy');

var Alert = /*#__PURE__*/React.forwardRef(function Alert(_ref, ref) {
  var children = _ref.children,
      title = _ref.title,
      description = _ref.description,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'info' : _ref$variant,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      onClose = _ref.onClose;
  var iconClassNames = classNames('h-5 w-5', {
    'text-yellow-400': variant === 'warning',
    'text-red-400': variant === 'danger',
    'text-green-400': variant === 'success',
    'text-blue-400': variant === 'info',
    'text-primary-400': variant === 'primary'
  });
  var icon = {
    warning: React__default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: iconClassNames,
      viewBox: "0 0 20 20",
      fill: "currentColor"
    }, React__default.createElement("path", {
      fillRule: "evenodd",
      d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z",
      clipRule: "evenodd"
    })),
    success: React__default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: iconClassNames,
      viewBox: "0 0 20 20",
      fill: "currentColor"
    }, React__default.createElement("path", {
      fillRule: "evenodd",
      d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z",
      clipRule: "evenodd"
    })),
    info: React__default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: iconClassNames,
      viewBox: "0 0 20 20",
      fill: "currentColor"
    }, React__default.createElement("path", {
      fillRule: "evenodd",
      d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z",
      clipRule: "evenodd"
    })),
    primary: React__default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: iconClassNames,
      viewBox: "0 0 20 20",
      fill: "currentColor"
    }, React__default.createElement("path", {
      fillRule: "evenodd",
      d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z",
      clipRule: "evenodd"
    })),
    danger: React__default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: iconClassNames,
      viewBox: "0 0 20 20",
      fill: "currentColor"
    }, React__default.createElement("path", {
      fillRule: "evenodd",
      d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z",
      clipRule: "evenodd"
    }))
  };
  return React__default.createElement("div", {
    className: classNames('rounded-md p-4', {
      'bg-yellow-50 dark:bg-yellow-600/75 dark:border-yellow-600': variant === 'warning',
      'bg-red-50 dark:bg-red-600/75 dark:border-red-600': variant === 'danger',
      'bg-green-50 dark:bg-green-600/75 dark:border-green-600': variant === 'success',
      'bg-blue-50 dark:bg-blue-600/75 dark:border-blue-600': variant === 'info',
      'bg-primary-50 dark:bg-primary-600/75 dark:border-primary-600': variant === 'primary'
    }, className),
    ref: ref,
    "data-testid": "alert"
  }, React__default.createElement("div", {
    className: "flex"
  }, React__default.createElement("div", {
    className: "flex-shrink-0"
  }, icon[variant]), React__default.createElement("div", {
    className: "ml-3 w-full"
  }, title ? React__default.createElement("h3", {
    "data-testid": "alert-title",
    className: classNames('text-sm font-medium dark:text-white', {
      'text-yellow-800': variant === 'warning',
      'text-red-800': variant === 'danger',
      'text-green-800': variant === 'success',
      'text-blue-800': variant === 'info',
      'text-primary-800': variant === 'primary'
    })
  }, title) : null, description || children ? React__default.createElement("div", {
    "data-testid": "alert-description",
    className: classNames('text-sm ', {
      'mt-2': title,
      'text-yellow-700 dark:text-yellow-100': variant === 'warning',
      'text-red-700 dark:text-red-100': variant === 'danger',
      'text-green-700 dark:text-green-100': variant === 'success',
      'text-blue-700 dark:text-blue-100': variant === 'info',
      'text-primary-700 dark:text-primary-100': variant === 'primary'
    })
  }, description || children) : null), onClose ? React__default.createElement("div", {
    className: "ml-auto pl-3"
  }, React__default.createElement("div", {
    className: "-mx-1.5 -my-1.5"
  }, React__default.createElement("button", {
    "data-testid": "alert-close-btn",
    type: "button",
    onClick: onClose,
    className: classNames('inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2', {
      'bg-yellow-50 text-yellow-500 hover:bg-yellow-100 focus:ring-offset-yellow-50 focus:ring-yellow-600 dark:bg-yellow-800 dark:text-yellow-100 dark:hover:text-white dark:hover:bg-yellow-700': variant === 'warning',
      'bg-red-50 text-red-500 hover:bg-red-100 focus:ring-offset-red-50 focus:ring-red-600 dark:bg-red-800 dark:text-red-100 dark:hover:text-white dark:hover:bg-red-700': variant === 'danger',
      'bg-green-50 text-green-500 hover:bg-green-100 focus:ring-offset-green-50 focus:ring-green-600 dark:bg-green-800 dark:text-green-100 dark:hover:text-white dark:hover:bg-green-700': variant === 'success',
      'bg-blue-50 text-blue-500 hover:bg-blue-100 focus:ring-offset-blue-50 focus:ring-blue-600 dark:bg-blue-800 dark:text-blue-100 dark:hover:text-white dark:hover:bg-blue-700': variant === 'info',
      'bg-primary-50 text-primary-500 hover:bg-primary-100 focus:ring-offset-primary-50 focus:ring-primary-600 dark:bg-primary-800 dark:text-primary-100 dark:hover:text-white dark:hover:bg-primary-700': variant === 'primary'
    })
  }, React__default.createElement("span", {
    className: "sr-only"
  }, "Dismiss"), React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    className: "h-6 w-6",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor",
    strokeWidth: 2
  }, React__default.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M6 18L18 6M6 6l12 12"
  }))))) : null));
});

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["children", "type", "disabled", "variant", "size", "className", "isLoading", "text"];
var Button = /*#__PURE__*/React.forwardRef(function Button(_ref, ref) {
  var children = _ref.children,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'button' : _ref$type,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'primary' : _ref$variant,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'regular' : _ref$size,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$isLoading = _ref.isLoading,
      isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,
      text = _ref.text,
      other = _objectWithoutPropertiesLoose(_ref, _excluded);

  var baseStyles = 'inline-flex items-center justify-center border border-transparent leading-4 font-medium rounded transition duration-300 ease-in-out whitespace-nowrap';
  var variantStyles = {
    primary: 'bg-primary-600 text-white shadow hover:shadow-md active:bg-primary-600 hover:bg-primary-700 focus:shadow-outline-primary dark:hover:bg-primary-500',
    secondary: 'border-primary-200 text-primary-700 bg-primary-50 hover:bg-primary-100 shadow hover:shadow-md focus:shadow-outline-primary dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700 dark:border-transparent',
    outline: 'border-gray-300 text-gray-600 shadow hover:shadow-md hover:text-gray-700 dark:border-gray-300 dark:text-white dark:hover:text-gray-400',
    danger: 'bg-red-500 text-white shadow hover:shadow-md active:bg-red-600 hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-600 focus:shadow-outline-red dark:hover:text-red-200 dark:border-transparent',
    'danger-outline': 'border-red-300 text-red-600 shadow hover:shadow-md active:border-red-400 hover:border-red-400 focus:shadow-outline-red dark:border-red-400 dark:text-red-400 dark:hover:text-red-300 dark:hover:border-red-300'
  };
  var sizeStyles = {
    small: 'px-2.5 py-1.5 text-xs',
    regular: 'px-4 py-2 text-sm',
    large: 'px-5 py-3 text-base',
    larger: 'px-6 py-4 text-md'
  };
  var iconSizeStyles = {
    small: 'h-3 w-3',
    regular: 'h-4 w-4',
    large: 'h-4 w-4',
    larger: 'h-5 w-5'
  };
  var iconStyles = {
    primary: 'text-white ',
    secondary: 'text-primary-700',
    outline: 'text-gray-600hover:text-gray-700',
    danger: 'text-white ',
    'danger-outline': 'text-red-600 hover:border-red-400'
  };
  return React__default.createElement("button", Object.assign({
    className: classNames(baseStyles, variantStyles[variant], sizeStyles[size], {
      'opacity-50': disabled
    }, {
      'cursor-not-allowed': disabled || isLoading
    }, className),
    type: type,
    disabled: disabled,
    ref: ref
  }, other), isLoading && React__default.createElement("svg", {
    "data-testid": "loading-svg",
    className: classNames(iconSizeStyles[size], iconStyles[variant], 'animate-spin -ml-1 mr-3'),
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24"
  }, React__default.createElement("circle", {
    className: "opacity-25",
    cx: "12",
    cy: "12",
    r: "10",
    stroke: "currentColor",
    strokeWidth: "4"
  }), React__default.createElement("path", {
    className: "opacity-75",
    fill: "currentColor",
    d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
  })), text || children);
});

var _excluded$1 = ["title", "subTitle", "tag", "description", "image", "icons", "withShadow", "className", "children"];
var Card = /*#__PURE__*/React.forwardRef(function Card(_ref, ref) {
  var title = _ref.title,
      subTitle = _ref.subTitle,
      tag = _ref.tag,
      description = _ref.description,
      image = _ref.image,
      icons = _ref.icons,
      _ref$withShadow = _ref.withShadow,
      withShadow = _ref$withShadow === void 0 ? true : _ref$withShadow,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      children = _ref.children,
      other = _objectWithoutPropertiesLoose(_ref, _excluded$1);

  return React__default.createElement("div", Object.assign({
    "data-testid": "card",
    ref: ref,
    className: classNames('flex flex-col overflow-hidden cursor-pointer transition duration-100 rounded-lg shadow-sm ring-1 ring-black ring-opacity-5 hover:ring-primary-300 dark:ring-0 dark:hover:ring-0', className, {
      'with-shadow': withShadow
    })
  }, other), image ? React__default.createElement("div", {
    className: "flex-shrink-0"
  }, React__default.createElement("img", {
    className: "w-full object-fit",
    src: image,
    alt: title
  })) : '', React__default.createElement("div", {
    className: "flex flex-col justify-between flex-1 p-5 bg-white dark:bg-gray-800"
  }, React__default.createElement("div", {
    className: "flex-1"
  }, tag && React__default.createElement("p", {
    className: "text-sm font-medium text-primary-600 dark:text-primary-500"
  }, tag), React__default.createElement("div", {
    className: "mt-2"
  }, React__default.createElement("h2", {
    className: "text-xl font-semibold text-gray-800 dark:text-white"
  }, title), subTitle && React__default.createElement("p", {
    className: "mt-1 text-sm font-medium text-primary-600 dark:text-primary-500"
  }, subTitle), React__default.createElement("p", {
    className: "mt-1 text-base text-gray-500 dark:text-gray-400"
  }, description), icons && React__default.createElement("div", {
    className: "flex mt-4 -space-x-1",
    "data-testid": "icons"
  }, icons.slice(0, 7).map(function (icon, i) {
    return React__default.createElement("img", {
      key: i,
      src: icon,
      alt: "icon",
      className: "inline-block bg-white rounded-full w-7 h-7 ring-2 ring-white dark:bg-gray-800 dark:ring-gray-800"
    });
  }), icons.length > 7 && React__default.createElement("span", {
    className: "inline-flex items-center justify-center text-sm text-white rounded-full w-7 h-7 bg-primary-600 ring-2 ring-white dark:bg-gray-800 dark:ring-gray-800"
  }, "+" + (icons.length - 7))), children))));
});

var styles = {
  dark: 'dark:border-gray-700 dark:bg-gray-800 dark:text-white dark:focus:border-gray-700 dark:focus:ring-gray-700',
  valid: 'border-green-600 focus:border-green-400 focus:shadow-outline-green',
  invalid: 'border-red-600 focus:border-red-400 focus:shadow-outline-red'
};

var _excluded$2 = ["className", "labelClassName", "label", "value", "disabled", "name", "valid", "labelDescription"];
var CheckBox = /*#__PURE__*/React.forwardRef(function CheckBox(_ref, ref) {
  var _classNames, _classNames2;

  var _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$labelClassName = _ref.labelClassName,
      labelClassName = _ref$labelClassName === void 0 ? '' : _ref$labelClassName,
      label = _ref.label,
      disabled = _ref.disabled,
      name = _ref.name,
      valid = _ref.valid,
      labelDescription = _ref.labelDescription,
      other = _objectWithoutPropertiesLoose(_ref, _excluded$2);

  return React__default.createElement(Wrapper, {
    label: label,
    disabled: disabled,
    name: name,
    labelClassName: labelClassName,
    labelDescription: labelDescription
  }, React__default.createElement("input", Object.assign({
    className: classNames('w-5 h-5 text-primary-600 border-gray-300 shadow-sm rounded-md focus:ring-primary-500 focus:border-primary-500 hover:bg-gray-100 dark:hover:bg-gray-700', {
      'cursor-not-allowed opacity-50': disabled
    }, styles.dark, (_classNames = {}, _classNames[styles.valid] = valid !== undefined && valid, _classNames), (_classNames2 = {}, _classNames2[styles.invalid] = valid !== undefined && !valid, _classNames2), className),
    name: name,
    id: name,
    type: "checkbox",
    disabled: disabled,
    ref: ref,
    "data-testid": name
  }, other)));
});

var Wrapper = function Wrapper(_ref2) {
  var children = _ref2.children,
      label = _ref2.label,
      disabled = _ref2.disabled,
      name = _ref2.name,
      labelClassName = _ref2.labelClassName,
      labelDescription = _ref2.labelDescription;
  return label ? React__default.createElement("label", {
    htmlFor: name,
    className: classNames({
      'cursor-not-allowed': disabled
    }, labelClassName, 'flex items-start')
  }, children, React__default.createElement("div", {
    className: "inline-block ml-2 text-sm "
  }, React__default.createElement("span", {
    className: classNames('text-gray-700 dark:text-gray-100 dark:focus:text-white dark:focus:bg-transparent font-medium', {
      'cursor-not-allowed': disabled
    })
  }, label), labelDescription && React__default.createElement("p", {
    className: "text-gray-500 dark:text-gray-400"
  }, labelDescription))) : React__default.createElement(React.Fragment, null, children);
};

var chipSizeStyles = {
  small: 'h-5',
  regular: 'h-7',
  large: 'h-9'
};
var textSizeStyles = {
  small: 'text-xs',
  regular: 'text-sm',
  large: 'text-base'
};
var closeSizeStyles = {
  small: 'mr-2',
  regular: 'ml-2 mr-3',
  large: 'ml-3 mr-3'
};
var Chip = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var className = props.className,
      _props$colorClassName = props.colorClassName,
      colorClassName = _props$colorClassName === void 0 ? classNames('bg-primary-200', 'text-primary-900', 'hover:text-primary-700', 'dark:hover:text-primary-400') : _props$colorClassName,
      _props$size = props.size,
      size = _props$size === void 0 ? 'regular' : _props$size,
      label = props.label,
      iconComponent = props.iconComponent,
      iconUrl = props.iconUrl,
      _props$iconInline = props.iconInline,
      iconInline = _props$iconInline === void 0 ? false : _props$iconInline,
      onClose = props.onClose;
  var hasCloseBtn = !!onClose;
  var hasIcon = !!iconUrl || !!iconComponent;
  var labelSizeStyles = {
    small: (!hasIcon && 'ml-2') + " " + (!hasCloseBtn && 'mr-2'),
    regular: (!hasIcon && 'ml-4') + " " + (!hasCloseBtn && 'mr-4'),
    large: (!hasIcon && 'ml-5') + " " + (!hasCloseBtn && 'mr-4')
  };
  var iconSizeStyles = {
    small: "mr-1 " + (iconInline ? iconUrl ? 'pl-0.5 py-0.5' : 'pl-2 py-2' : 'px-0 py-0'),
    regular: "mr-2 " + (iconInline ? iconUrl ? 'pl-1 py-1' : 'pl-4 py-4' : 'px-0 py-0'),
    large: "mr-3 " + (iconInline ? iconUrl ? 'pl-1 py-1' : 'pl-5 py-5' : 'px-0 py-0')
  };
  var chipStyle = chipSizeStyles[size];
  var labelStyle = textSizeStyles[size] + " " + labelSizeStyles[size];
  var closeStyle = "ml-2 " + closeSizeStyles[size];
  var iconStyle = hasIcon && iconSizeStyles[size];
  return React__default.createElement("div", {
    "data-testid": "chip",
    ref: ref,
    className: classNames('inline-flex items-center rounded-full transition-opacity ease-in-out', chipStyle, colorClassName, className)
  }, hasIcon && React__default.createElement(React__default.Fragment, null, iconComponent ? React__default.createElement("div", {
    className: classNames('inline-flex items-center h-full mr-2', iconStyle),
    "data-testid": "chip-image-component"
  }, iconComponent) : iconUrl && React__default.createElement("div", {
    className: classNames('inline-flex items-center h-full mr-2', iconStyle),
    "data-testid": "chip-image-url"
  }, React__default.createElement("img", {
    src: iconUrl,
    alt: "icon",
    className: 'h-full rounded-full'
  }))), React__default.createElement("span", {
    "data-testid": "chip-label",
    className: classNames('text-xs font-semibold', labelStyle)
  }, label), onClose && React__default.createElement("button", {
    "data-testid": "chip-close-btn",
    className: classNames('bg-transparent hover focus:outline-none', closeStyle),
    onClick: onClose
  }, React__default.createElement("svg", {
    "aria-hidden": "true",
    focusable: "false",
    "data-prefix": "fas",
    "data-icon": "times",
    className: "w-2",
    role: "img",
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 352 512"
  }, React__default.createElement("path", {
    fill: "currentColor",
    d: "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"
  }))));
});

var _excluded$3 = ["children", "onClose", "isOpen", "hasCloseIcon", "className", "style"];
var Modal = /*#__PURE__*/React__default.forwardRef(function Modal(props, ref) {
  var _document$getElements;

  var children = props.children,
      onClose = props.onClose,
      isOpen = props.isOpen,
      hasCloseIcon = props.hasCloseIcon,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      other = _objectWithoutPropertiesLoose(props, _excluded$3);

  var _useState = React.useState(false),
      mounted = _useState[0],
      setMounted = _useState[1];

  React.useEffect(function () {
    setMounted(true);
  }, []);
  var modalComponent = React__default.createElement(react.Transition, {
    show: isOpen
  }, React__default.createElement(react.Transition.Child, {
    enter: "transition ease-out duration-150",
    enterFrom: "opacity-0",
    enterTo: "opacity-100",
    leave: "transition ease-in duration-150",
    leaveFrom: "opacity-100",
    leaveTo: "opacity-0"
  }, React__default.createElement("div", {
    className: "fixed inset-0 z-50 flex items-end bg-gray-400 bg-opacity-75 dark:bg-gray-600 dark:bg-opacity-75 sm:items-center sm:justify-center",
    "data-testid": "backdrop",
    onClick: onClose
  }, React__default.createElement(react.Transition.Child, Object.assign({
    enter: "transition ease-out duration-150",
    enterFrom: "opacity-0 transform translate-y-1/4 scale-95",
    enterTo: "opacity-100 scale-100",
    leave: "transition ease-in duration-150",
    leaveFrom: "opacity-100 scale-100",
    leaveTo: "opacity-0  transform translate-y-1/4 scale-95",
    className: "relative w-full p-5 overflow-y-auto bg-white dark:bg-gray-800 dark:text-gray-400 shadow-lg rounded-t-lg sm:p-6 no-scrollbar sm:rounded-lg sm:m-4 sm:max-w-xl " + className,
    style: _extends({
      maxHeight: '90%'
    }, style),
    ref: ref,
    role: "dialog",
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, other), hasCloseIcon && React__default.createElement("button", {
    className: "absolute top-4 right-4 sm:top-5 sm:right-5 text-gray-700 transition-all duration-200 rounded-full hover:bg-gray-100 focus:outline-none",
    onClick: onClose
  }, React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    className: "h-8 w-8 p-1.5",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor"
  }, React__default.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 2,
    d: "M6 18L18 6M6 6l12 12"
  }))), children))));
  var parentElement = (_document$getElements = document.getElementsByClassName('apideck')) != null && _document$getElements.length ? document.getElementsByClassName('apideck')[0] : document.body;
  return mounted ? reactDom.createPortal(modalComponent, parentElement) : null;
});

var ModalContext = /*#__PURE__*/React.createContext({});
var ModalProvider = function ModalProvider(_ref) {
  var children = _ref.children;

  var _useState = React.useState(false),
      isOpen = _useState[0],
      setIsOpen = _useState[1];

  var _useState2 = React.useState(false),
      modalContent = _useState2[0],
      setModalContent = _useState2[1];

  var _useState3 = React.useState({}),
      options = _useState3[0],
      setOptions = _useState3[1];

  var addModal = React.useCallback(function (content, options) {
    setModalContent(content);
    setOptions(options);
    setTimeout(function () {
      return setIsOpen(true);
    });
  }, [setModalContent, setIsOpen]);
  var removeModal = React.useCallback(function () {
    setIsOpen(false);
    setTimeout(function () {
      return setModalContent(false);
    }, 300);
  }, [setModalContent]);
  return React__default.createElement(ModalContext.Provider, {
    value: {
      addModal: addModal,
      removeModal: removeModal
    }
  }, modalContent && React__default.createElement(Modal, Object.assign({
    isOpen: isOpen,
    onClose: function onClose() {
      return removeModal();
    }
  }, options), modalContent), children);
};
var useModal = function useModal() {
  return React.useContext(ModalContext);
};

var ToastContext = /*#__PURE__*/React.createContext({});
var id = 1;
var ToastProvider = function ToastProvider(_ref) {
  var children = _ref.children;

  var _useState = React.useState([]),
      toasts = _useState[0],
      setToasts = _useState[1];

  var addToast = React.useCallback(function (toast) {
    setToasts(function (toasts) {
      return [].concat(toasts, [_extends({}, toast, {
        id: id++
      })]);
    });
  }, [setToasts]);
  var removeToast = React.useCallback(function (id) {
    setToasts(function (toasts) {
      return toasts.filter(function (toast) {
        return toast.id !== id;
      });
    });
  }, [setToasts]);
  return React__default.createElement(ToastContext.Provider, {
    value: {
      addToast: addToast,
      removeToast: removeToast
    }
  }, React__default.createElement("div", {
    className: "fixed top-0 right-0 z-50 w-full max-w-sm xl:max-w-md",
    style: {
      zIndex: 100
    }
  }, toasts == null ? void 0 : toasts.map(function (toast, i) {
    return React__default.createElement(Toast, Object.assign({
      key: i
    }, toast));
  })), children);
};
var useToast = function useToast() {
  return React.useContext(ToastContext);
};

var useOutsideClick = function useOutsideClick(ref, handler) {
  React.useEffect(function () {
    var listener = function listener(event) {
      if (!ref.current || ref.current.contains(event.target)) return;
      handler(event);
    };

    document.addEventListener('mousedown', listener);
    document.addEventListener('touchstart', listener);
    return function () {
      document.removeEventListener('mousedown', listener);
      document.removeEventListener('touchstart', listener);
    };
  }, [ref, handler]);
};

var usePrevious = function usePrevious(value) {
  var ref = React.useRef();
  React.useEffect(function () {
    ref.current = value;
  }, [value]);
  return ref.current;
};

var useDebounce = function useDebounce(value, delay) {
  var _useState = React.useState(value),
      debouncedValue = _useState[0],
      setDebouncedValue = _useState[1];

  React.useEffect(function () {
    var handler = setTimeout(function () {
      setDebouncedValue(value);
    }, delay);
    return function () {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
};

var _excluded$4 = ["name", "value", "type", "placeholder", "disabled", "className", "containerClassName", "onChange", "minDate", "maxDate", "isRange", "onClear"];
var DateInput = function DateInput(_ref) {
  var name = _ref.name,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? '' : _ref$value,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'date' : _ref$type,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? 'Select date' : _ref$placeholder,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$containerClassNa = _ref.containerClassName,
      containerClassName = _ref$containerClassNa === void 0 ? '' : _ref$containerClassNa,
      onChange = _ref.onChange,
      minDate = _ref.minDate,
      maxDate = _ref.maxDate,
      _ref$isRange = _ref.isRange,
      isRange = _ref$isRange === void 0 ? false : _ref$isRange,
      onClear = _ref.onClear,
      other = _objectWithoutPropertiesLoose(_ref, _excluded$4);

  var inputRef = React.useRef(null);
  var datePickerRef = React.useRef(null);

  var _useState = React.useState(false),
      showDatePicker = _useState[0],
      setShowDatePicker = _useState[1];

  var _useState2 = React.useState(value),
      datePickerValue = _useState2[0],
      setDatePickerValue = _useState2[1];

  var _useState3 = React.useState(),
      hoveringDay = _useState3[0],
      setHoveringDay = _useState3[1];

  var _useState4 = React.useState(value ? new Date(value).getFullYear() : new Date(minDate != null ? minDate : new Date()).getFullYear()),
      year = _useState4[0],
      setYear = _useState4[1];

  var _useState5 = React.useState(value ? new Date(value).getMonth() : new Date(minDate != null ? minDate : new Date()).getMonth()),
      month = _useState5[0],
      setMonth = _useState5[1];

  var _useState6 = React.useState(value ? new Date(value).getDate() : null),
      day = _useState6[0],
      setDay = _useState6[1];

  var _useState7 = React.useState('00:00'),
      time = _useState7[0],
      setTime = _useState7[1];

  var _useState8 = React.useState([]),
      numberOfDays = _useState8[0],
      setNumberOfDays = _useState8[1];

  var _useState9 = React.useState([]),
      blankDays = _useState9[0],
      setBlankDays = _useState9[1];

  var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  useOutsideClick(datePickerRef, function () {
    return setShowDatePicker(false);
  });
  React.useEffect(function () {
    var getNumberOfDays = function getNumberOfDays() {
      var daysInMonth = new Date(year, month + 1, 0).getDate();
      var dayOfWeek = new Date(year, month).getDay();
      var blankDaysArray = [];
      var daysArray = [];

      for (var i = 1; i <= dayOfWeek; i++) {
        blankDaysArray.push(i);
      }

      for (var _i = 1; _i <= daysInMonth; _i++) {
        daysArray.push(_i);
      }

      setBlankDays(blankDaysArray);
      setNumberOfDays(daysArray);
    };

    getNumberOfDays();
  }, [month, year, minDate]);
  React.useEffect(function () {
    var formattedDate = function formattedDate(day) {
      var selectedDate = new Date(year, month, day);
      var formattedDate = selectedDate.getFullYear() + "-" + ('0' + (selectedDate.getMonth() + 1)).slice(-2) + "-" + ('0' + selectedDate.getDate()).slice(-2);

      if (type === 'datetime') {
        formattedDate = formattedDate + " " + time;
      }

      return formattedDate;
    };

    var handleValueChanged = function handleValueChanged() {
      setDatePickerValue(formattedDate(day));

      if (inputRef != null && inputRef.current) {
        var inputValue = formattedDate(day);
        var event = new Event('input', {
          bubbles: true
        });

        if (type === 'datetime' && time) {
          var dateTime = new Date(year, month, day, parseInt(time.substring(0, 2)), parseInt(time.substring(3, 5)));
          inputValue = dateTime.toISOString();
        }

        inputRef.current.value = inputValue;
        inputRef.current.dispatchEvent(event);
        onChange(event);
      }
    };

    if (day) handleValueChanged(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [time, day]);
  React.useEffect(function () {
    // If value is provided for a datetime, set the correct state for time
    if (value && type === 'datetime' && time === '00:00') {
      var timeString = new Date(value.toString()).toLocaleTimeString('en', {
        timeStyle: 'short',
        hour12: false
      });
      setTime(timeString);
    }
  }, [time, type, value]);

  var isToday = function isToday(day) {
    var today = new Date();
    var selectedDay = new Date(year, month, day);
    return today.toDateString() === selectedDay.toDateString();
  };

  var isMinDay = function isMinDay(day) {
    if (!minDate) return;
    var selectedDay = new Date(year, month, day);
    var min = new Date(minDate);
    return selectedDay.toDateString() === min.toDateString();
  };

  var isBeforeMinDate = function isBeforeMinDate(day) {
    if (!minDate) return;
    var selectedDay = new Date(year, month, day);
    var min = new Date(minDate);
    return selectedDay.getTime() < min.getTime() && !isMinDay(day);
  };

  var isAfterMinDate = function isAfterMinDate(day) {
    if (!minDate) return;
    var selectedDay = new Date(year, month, day);
    var min = new Date(minDate);
    return selectedDay.getTime() > min.getTime();
  };

  var isAfterMaxDate = function isAfterMaxDate(day) {
    if (!maxDate) return;
    var selectedDay = new Date(year, month, day);
    var max = new Date(maxDate);
    return selectedDay.getTime() >= max.getTime();
  };

  var isBeforeHoverDay = function isBeforeHoverDay(day) {
    var hover = new Date(year, month, hoveringDay);
    var selectedDay = new Date(year, month, day);
    return selectedDay.getTime() <= hover.getTime();
  };

  var isBeforeSelectedDay = function isBeforeSelectedDay(day) {
    if (!datePickerValue) return false;
    var selected = new Date(datePickerValue);
    var selectedDay = new Date(year, month, day);
    return selectedDay.getTime() <= selected.getTime();
  };

  var isHoverDay = function isHoverDay(day) {
    var hover = new Date(year, month, hoveringDay);
    var selectedDay = new Date(year, month, day);
    return selectedDay.toDateString() === hover.toDateString();
  };

  var isSelectedDay = function isSelectedDay(day) {
    var selectedDay = new Date(year, month, day);
    var selected = new Date(datePickerValue);
    return selectedDay.toDateString() === selected.toDateString();
  };

  var selectDay = function selectDay(day) {
    setDay(day);
    setShowDatePicker(false);
  };

  var prevMonth = function prevMonth() {
    var isLastYear = month - 1 < 0;

    if (isLastYear) {
      setMonth(11);
      setYear(year - 1);
    } else {
      setMonth(month - 1);
    }
  };

  var nextMonth = function nextMonth() {
    var isNextYear = month + 1 > 11;

    if (isNextYear) {
      setMonth(0);
      setYear(year + 1);
    } else {
      setMonth(month + 1);
    }
  };

  return React__default.createElement("div", {
    className: classNames('relative w-full', containerClassName)
  }, React__default.createElement("input", {
    hidden: true,
    readOnly: true,
    type: "text",
    name: name,
    ref: inputRef,
    value: datePickerValue
  }), React__default.createElement("input", Object.assign({
    type: "text",
    readOnly: true,
    value: datePickerValue,
    placeholder: placeholder,
    onClick: function onClick() {
      return setShowDatePicker(!showDatePicker);
    },
    "data-testid": name,
    className: classNames('block w-full text-gray-600 border-gray-300 rounded-md shadow-sm sm:text-sm focus:ring-primary-500 focus:border-primary-500 placeholder-gray-400', {
      'cursor-not-allowed opacity-50': disabled
    }, className),
    disabled: disabled
  }, other)), React__default.createElement("div", {
    className: "absolute top-0 right-0 z-10 px-3 py-2"
  }, React__default.createElement("svg", {
    className: classNames('w-5 h-5 text-gray-400', {
      'opacity-0': datePickerValue && onClear
    }),
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor"
  }, React__default.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "2",
    d: "M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
  })), datePickerValue && onClear && React__default.createElement("button", {
    className: "absolute hover:bg-gray-100 rounded-full flex items-center justify-center p-1 top-2 right-2",
    style: {
      top: 7
    },
    onClick: function onClick() {
      setDatePickerValue('');
      onClear();
    }
  }, React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    className: "w-4 h-4",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor",
    strokeWidth: 2
  }, React__default.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M6 18L18 6M6 6l12 12"
  })))), React__default.createElement("div", {
    "data-testid": "datePicker",
    ref: datePickerRef,
    style: {
      minWidth: 360
    },
    className: classNames('absolute top-0 right-0 z-20 p-4 mt-12 bg-white rounded-md shadow-md max-w-sm', {
      hidden: !showDatePicker
    })
  }, React__default.createElement("div", {
    className: "flex items-center justify-between mb-2"
  }, React__default.createElement("div", null, React__default.createElement("span", {
    className: "text-lg font-bold text-gray-800"
  }, monthNames[month]), React__default.createElement("input", {
    className: "inline-block p-1 ml-1 text-lg font-normal text-gray-600 border-none rounded focus:border-none",
    style: {
      width: 70
    },
    value: year || '',
    type: "number",
    "data-testid": "year",
    onChange: function onChange(e) {
      return setYear(+e.target.value);
    }
  }), type === 'datetime' && React__default.createElement(React__default.Fragment, null, React__default.createElement("input", {
    className: "inline-block p-1 pr-0 ml-1 font-normal text-gray-600 border-none rounded focus:border-none",
    value: time,
    type: "time",
    "data-testid": "timeInput",
    onChange: function onChange(e) {
      return setTime(e.target.value);
    }
  }))), React__default.createElement("div", null, React__default.createElement("button", {
    type: "button",
    className: "inline-flex p-1 transition duration-100 ease-in-out rounded-full cursor-pointer hover:bg-gray-200",
    "data-testid": "prevMonth",
    onClick: function onClick() {
      return prevMonth();
    }
  }, React__default.createElement("svg", {
    className: "inline-flex w-5 h-5 text-gray-500",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor"
  }, React__default.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "2",
    d: "M15 19l-7-7 7-7"
  }))), React__default.createElement("button", {
    type: "button",
    className: "inline-flex p-1 transition duration-100 ease-in-out rounded-full cursor-pointer hover:bg-gray-200",
    "data-testid": "nextMonth",
    onClick: function onClick() {
      return nextMonth();
    }
  }, React__default.createElement("svg", {
    className: "inline-flex w-5 h-5 text-gray-500",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor"
  }, React__default.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "2",
    d: "M9 5l7 7-7 7"
  }))))), React__default.createElement("div", {
    className: "flex flex-wrap mb-3 -mx-1"
  }, days == null ? void 0 : days.map(function (day, index) {
    return React__default.createElement("div", {
      style: {
        width: '14.26%'
      },
      className: "px-1",
      key: day + "-" + index
    }, React__default.createElement("div", {
      className: "text-xs font-medium text-center text-gray-800"
    }, day));
  })), React__default.createElement("div", {
    className: "flex flex-wrap -mx-1"
  }, blankDays == null ? void 0 : blankDays.map(function (day) {
    return React__default.createElement("div", {
      key: day,
      style: {
        width: '14.28%'
      },
      className: "p-1 text-sm text-center border border-transparent"
    });
  }), numberOfDays == null ? void 0 : numberOfDays.map(function (dayNumber, index) {
    return React__default.createElement("div", {
      style: {
        width: '14.28%'
      },
      className: "px-1 mb-1",
      key: index
    }, React__default.createElement("div", {
      "data-testid": "day-" + dayNumber,
      onClick: function onClick() {
        if (!(minDate && isBeforeMinDate(dayNumber)) && !(maxDate && isAfterMaxDate(dayNumber))) selectDay(dayNumber);
      },
      onMouseOver: function onMouseOver() {
        return setHoveringDay(dayNumber);
      },
      onMouseOut: function onMouseOut() {
        return setHoveringDay(null);
      },
      className: classNames('text-sm leading-loose text-center transition duration-100 ease-in-out rounded-md cursor-pointer', {
        '!text-gray-200 hover:!bg-transparent !cursor-default': minDate && isBeforeMinDate(dayNumber) || maxDate && isAfterMaxDate(dayNumber),
        'font-bold': isToday(dayNumber),
        'text-gray-700 hover:bg-primary-200': !isToday(dayNumber),
        'bg-primary-300 -mr-1 pr-1 rounded-r-none': isMinDay(dayNumber) && isRange,
        'bg-primary-200 -mx-1.5 px-1.5 rounded-none': isAfterMinDate(dayNumber) && (isBeforeHoverDay(dayNumber) || isBeforeSelectedDay(dayNumber)) && !isAfterMaxDate(dayNumber) && isRange,
        'rounded-r bg-primary-300': (isHoverDay(dayNumber) || isSelectedDay(dayNumber)) && isRange,
        '!bg-primary-200': isSelectedDay(dayNumber)
      })
    }, dayNumber));
  }))));
};

var _excluded$5 = ["options", "className", "buttonClassName", "buttonLabel", "itemsClassName", "align", "minWidth", "upward", "onSelect", "selectedOption", "trigger", "isSearchable", "isScrollable", "onClear", "iconClassName"];
var Dropdown = /*#__PURE__*/React.forwardRef(function Dropdown(_ref, ref) {
  var options = _ref.options,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$buttonClassName = _ref.buttonClassName,
      buttonClassName = _ref$buttonClassName === void 0 ? '' : _ref$buttonClassName,
      _ref$buttonLabel = _ref.buttonLabel,
      buttonLabel = _ref$buttonLabel === void 0 ? 'Options' : _ref$buttonLabel,
      _ref$itemsClassName = _ref.itemsClassName,
      itemsClassName = _ref$itemsClassName === void 0 ? '' : _ref$itemsClassName,
      _ref$align = _ref.align,
      align = _ref$align === void 0 ? 'right' : _ref$align,
      _ref$minWidth = _ref.minWidth,
      minWidth = _ref$minWidth === void 0 ? 180 : _ref$minWidth,
      _ref$upward = _ref.upward,
      upward = _ref$upward === void 0 ? false : _ref$upward,
      onSelect = _ref.onSelect,
      selectedOption = _ref.selectedOption,
      trigger = _ref.trigger,
      _ref$isSearchable = _ref.isSearchable,
      isSearchable = _ref$isSearchable === void 0 ? false : _ref$isSearchable,
      _ref$isScrollable = _ref.isScrollable,
      isScrollable = _ref$isScrollable === void 0 ? false : _ref$isScrollable,
      onClear = _ref.onClear,
      _ref$iconClassName = _ref.iconClassName,
      iconClassName = _ref$iconClassName === void 0 ? '' : _ref$iconClassName,
      other = _objectWithoutPropertiesLoose(_ref, _excluded$5);

  var _useState = React.useState(selectedOption || null),
      activeOption = _useState[0],
      setActiveOption = _useState[1];

  var _useState2 = React.useState(options),
      filteredOptions = _useState2[0],
      setFilteredOptions = _useState2[1];

  var _useState3 = React.useState(''),
      searchTerm = _useState3[0],
      setSearchTerm = _useState3[1];

  var searchInputRef = React.useRef(null);

  var _onClick = function onClick(option) {
    setActiveOption(option);
    if (option.onClick) option.onClick();
    if (onSelect) onSelect(option);
  };

  var onSearchChange = function onSearchChange(text) {
    setSearchTerm(text);
    var results = options.filter(function (option) {
      var _option$value, _option$value$toStrin, _option$label, _option$label$toStrin;

      return ((_option$value = option.value) == null ? void 0 : (_option$value$toStrin = _option$value.toString()) == null ? void 0 : _option$value$toStrin.toLowerCase().includes(text.toLowerCase())) || ((_option$label = option.label) == null ? void 0 : (_option$label$toStrin = _option$label.toString()) == null ? void 0 : _option$label$toStrin.toLowerCase().includes(text.toLowerCase()));
    });
    setFilteredOptions(results);
  };

  React.useEffect(function () {
    if (selectedOption) {
      setActiveOption(selectedOption);
    }
  }, [selectedOption]);
  var menuOptions = searchTerm != null && searchTerm.length ? filteredOptions : options;
  return React__default.createElement(react.Menu, Object.assign({
    as: "div",
    className: classNames('relative inline-block', className),
    ref: ref,
    "data-testid": "dropdown"
  }, other), function (_ref2) {
    var open = _ref2.open;
    setTimeout(function () {
      var _searchInputRef$curre;

      return (_searchInputRef$curre = searchInputRef.current) == null ? void 0 : _searchInputRef$curre.focus();
    });
    return React__default.createElement(React__default.Fragment, null, trigger ? React__default.createElement(react.Menu.Button, {
      className: buttonClassName
    }, trigger) : React__default.createElement("div", {
      className: "relative"
    }, React__default.createElement(react.Menu.Button, {
      className: classNames('flex items-center justify-between w-full px-4 py-2 text-sm font-medium border rounded-md shadow-sm text-gray-800 bg-white border-gray-200 group hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-cool-gray-100 focus:ring-gray-300 dark:ring-gray-500 dark:bg-gray-800 dark:text-gray-200 dark:border-gray-500 dark:hover:bg-gray-700', buttonClassName)
    }, (activeOption == null ? void 0 : activeOption.label) || buttonLabel, React__default.createElement("svg", {
      className: classNames('w-5 h-5 ml-2 -mr-1', iconClassName, {
        'opacity-0': activeOption && onClear
      }),
      viewBox: "0 0 20 20",
      fill: "currentColor"
    }, React__default.createElement("path", {
      fillRule: "evenodd",
      d: "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z",
      clipRule: "evenodd"
    }))), activeOption && onClear && React__default.createElement("button", {
      className: "absolute hover:bg-gray-100 rounded-full flex items-center justify-center p-1 top-2 right-2 dark:bg-gray-700",
      style: {
        top: 7
      },
      onClick: function onClick() {
        setSearchTerm('');
        setActiveOption(null);
        onClear();
      }
    }, React__default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: "w-4 h-4",
      fill: "none",
      viewBox: "0 0 24 24",
      stroke: "currentColor",
      strokeWidth: 2
    }, React__default.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M6 18L18 6M6 6l12 12"
    })))), React__default.createElement(react.Transition, {
      show: open,
      enter: "transition ease-out duration-300",
      enterFrom: "transform opacity-0 scale-95",
      enterTo: "transform opacity-100 scale-100",
      leave: "transition ease-in duration-75",
      leaveFrom: "transform opacity-100 scale-100",
      leaveTo: "transform opacity-0 scale-95",
      className: "min-w-sm"
    }, React__default.createElement(react.Menu.Items, {
      "static": true,
      "data-testid": "dropdown-items",
      className: classNames('absolute shadow-sm z-10 bg-white origin-top-right dark:bg-gray-800 border divide-y rounded-md outline-none border-cool-gray-200 divide-cool-gray-100 dark:divide-gray-400 dark:border-gray-700', {
        'right-0': align === 'right',
        'left-0 ': align === 'left',
        'transform -translate-y-full -mt-12': upward,
        'mt-2': !upward
      }, itemsClassName),
      style: {
        minWidth: minWidth
      }
    }, isSearchable && React__default.createElement("div", {
      className: "p-3 relative"
    }, React__default.createElement("input", {
      name: "search",
      type: "text",
      ref: searchInputRef,
      placeholder: "Search",
      className: "w-full text-gray-600 border border-transparent bg-gray-100 rounded-md sm:text-sm focus:ring-transparent focus:border-gray-200 placeholder-gray-400 py-2 dark:bg-gray-700 dark:text-gray-300 dark:focus:border-gray-400",
      autoComplete: "off",
      autoFocus: true,
      value: searchTerm,
      onChange: function onChange(e) {
        return onSearchChange(e.currentTarget.value);
      },
      "data-testid": "search-input"
    }), (searchTerm == null ? void 0 : searchTerm.length) > 0 && React__default.createElement("button", {
      className: "text-gray-400 absolute right-5 top-[21px] rounded-full hover:text-gray-300 dark:text-gray-700 dark:hover:text-gray-500",
      onClick: function onClick() {
        return setSearchTerm('');
      }
    }, React__default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: "h-5 w-5",
      fill: "none",
      viewBox: "0 0 24 24",
      stroke: "currentColor",
      strokeWidth: "{2}"
    }, React__default.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M6 18L18 6M6 6l12 12"
    })))), React__default.createElement("div", {
      className: classNames('py-2', {
        'max-h-72 overflow-y-auto': isScrollable
      })
    }, (searchTerm == null ? void 0 : searchTerm.length) > 0 && !(menuOptions != null && menuOptions.length) ? React__default.createElement("p", {
      className: "px-4 text-gray-500 text-sm"
    }, "No results") : null, menuOptions.map(function (option, i) {
      return React__default.createElement(react.Menu.Item, {
        key: i
      }, function (_ref3) {
        var _option$href;

        var active = _ref3.active;
        var labelClassName = classNames(active ? 'bg-gray-100 text-gray-900 dark:bg-gray-700 dark:text-gray-100' : 'text-gray-900 dark:text-gray-100', 'flex-1 min-w-0 px-2 text-sm truncate cursor-pointer rounded-md py-1.5 mx-2 flex items-center dark:bg-gray-800 dark:text-gray-200', option.labelClassName || '');
        return React__default.createElement("div", {
          onClick: function onClick() {
            return _onClick(option);
          },
          "data-testid": "item-" + i,
          className: classNames('flex items-center justify-between min-w-0 cursor-pointer overflow-hidden', {
            'mt-1.5 pt-1.5 border-t border-gray-100 dark:border-gray-500': option.borderTop
          }, option.className || '')
        }, (_option$href = option.href) != null && _option$href.length ? React__default.createElement("a", {
          href: option.href,
          className: labelClassName
        }, option.imageUrl && React__default.createElement("img", {
          src: option.imageUrl,
          className: "h-6 w-6 rounded mr-2",
          alt: "option"
        }), option.label) : React__default.createElement("span", {
          className: labelClassName
        }, option.imageUrl && React__default.createElement("img", {
          src: option.imageUrl,
          className: "h-6 w-6 rounded mr-2",
          alt: "option"
        }), option.label));
      });
    })))));
  });
});

var _excluded$6 = ["className", "disabled", "placeholder", "options", "valid", "size", "allowEmpty"];
var Select = /*#__PURE__*/React.forwardRef(function Select(_ref, ref) {
  var _classNames;

  var _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? 'Select an option' : _ref$placeholder,
      options = _ref.options,
      valid = _ref.valid,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'regular' : _ref$size,
      _ref$allowEmpty = _ref.allowEmpty,
      allowEmpty = _ref$allowEmpty === void 0 ? false : _ref$allowEmpty,
      other = _objectWithoutPropertiesLoose(_ref, _excluded$6);

  return React__default.createElement("select", Object.assign({
    className: classNames('w-full text-base text-gray-600 shadow-sm border-gray-300 rounded-md focus:outline-none sm:text-sm focus:ring-primary-500 focus:border-primary-500 placeholder-gray-400', (_classNames = {
      'cursor-not-allowed opacity-50': disabled,
      'px-3 py-2': size === 'regular',
      'px-2 py-1': size === 'small'
    }, _classNames[styles.valid] = valid !== undefined && valid, _classNames[styles.invalid] = valid !== undefined && !valid, _classNames), styles.dark, className),
    ref: ref,
    disabled: disabled,
    "data-testid": other.name
  }, other), React__default.createElement("option", {
    disabled: !allowEmpty,
    value: ""
  }, placeholder), options.map(function (option, index) {
    var value = option.value,
        label = option.label;
    return React__default.createElement("option", {
      key: label + "-" + index,
      value: value
    }, label);
  }));
});

var _excluded$7 = ["className", "disabled", "valid"];
var TextArea = /*#__PURE__*/React.forwardRef(function TextArea(_ref, ref) {
  var _classNames, _classNames2;

  var _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      valid = _ref.valid,
      other = _objectWithoutPropertiesLoose(_ref, _excluded$7);

  return React__default.createElement("textarea", Object.assign({
    className: classNames('w-full px-3 py-2 border-gray-300 rounded-md shadow-sm sm:text-sm focus:ring-primary-500 focus:border-primary-500 placeholder-gray-400', {
      'cursor-not-allowed opacity-50': disabled
    }, styles.dark, (_classNames = {}, _classNames[styles.valid] = valid !== undefined && valid, _classNames), (_classNames2 = {}, _classNames2[styles.invalid] = valid !== undefined && !valid, _classNames2), className),
    disabled: disabled,
    id: other.name,
    ref: ref
  }, other));
});

var _excluded$8 = ["type", "sensitive", "canBeCopied", "searchable", "onCloseIconClick", "searchIconClassName", "closeIconClassName", "prepend", "append"],
    _excluded2 = ["className", "type", "disabled", "valid"];
var TextInput = /*#__PURE__*/React.forwardRef(function TextInput(_ref, ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'text' : _ref$type,
      _ref$sensitive = _ref.sensitive,
      sensitive = _ref$sensitive === void 0 ? false : _ref$sensitive,
      _ref$canBeCopied = _ref.canBeCopied,
      canBeCopied = _ref$canBeCopied === void 0 ? false : _ref$canBeCopied,
      _ref$searchable = _ref.searchable,
      searchable = _ref$searchable === void 0 ? false : _ref$searchable,
      onCloseIconClick = _ref.onCloseIconClick,
      _ref$searchIconClassN = _ref.searchIconClassName,
      searchIconClassName = _ref$searchIconClassN === void 0 ? '' : _ref$searchIconClassN,
      _ref$closeIconClassNa = _ref.closeIconClassName,
      closeIconClassName = _ref$closeIconClassNa === void 0 ? '' : _ref$closeIconClassNa,
      prepend = _ref.prepend,
      append = _ref.append,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$8);

  var _useState = React.useState(false),
      show = _useState[0],
      setShow = _useState[1];

  var clipboard = useClipboardCopy.useClipboard({
    copiedTimeout: 2000
  });
  var inputRef = React.createRef();

  if (sensitive || canBeCopied || searchable) {
    var inputType = sensitive ? 'password' : type;
    return React__default.createElement("div", {
      className: classNames('relative', props.className)
    }, searchable && React__default.createElement(React.Fragment, null, React__default.createElement("div", {
      className: classNames('absolute left-0 flex items-center pt-[9px] pl-2 pointer-events-none', searchIconClassName)
    }, React__default.createElement("svg", {
      className: "w-5 h-5 text-gray-400",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      fill: "currentColor",
      "aria-hidden": "true"
    }, React__default.createElement("path", {
      fillRule: "evenodd",
      d: "M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z",
      clipRule: "evenodd"
    }))), onCloseIconClick && React__default.createElement("div", {
      className: classNames('absolute right-0 flex items-center pt-[9px] pr-2', closeIconClassName)
    }, React__default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: "w-5 h-5 text-gray-400 cursor-pointer hover:text-gray-500",
      fill: "none",
      viewBox: "0 0 24 24",
      stroke: "currentColor",
      strokeWidth: 2,
      onClick: onCloseIconClick
    }, React__default.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M6 18L18 6M6 6l12 12"
    })))), React__default.createElement(Input, Object.assign({}, props, {
      type: show ? 'text' : inputType,
      ref: inputRef,
      className: classNames(props.className, {
        'pl-8': searchable
      })
    })), canBeCopied && React__default.createElement("button", {
      onClick: function onClick() {
        var _inputRef$current;

        return clipboard.copy((_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.value);
      },
      type: "button",
      className: "absolute right-0 bg-white dark:bg-gray-800 top-[5px] p-1 mr-2 flex items-center justify-center text-gray-400 hover:text-gray-500 dark:text-white transition-all duration-200 rounded-md hover:bg-gray-100 focus:outline-none",
      "data-testid": "copy-button"
    }, clipboard.copied ? React__default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: "h-5 w-5",
      viewBox: "0 0 20 20",
      fill: "currentColor"
    }, React__default.createElement("path", {
      d: "M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"
    }), React__default.createElement("path", {
      fillRule: "evenodd",
      d: "M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm9.707 5.707a1 1 0 00-1.414-1.414L9 12.586l-1.293-1.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z",
      clipRule: "evenodd"
    })) : React__default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: "h-5 w-5",
      viewBox: "0 0 20 20",
      fill: "currentColor"
    }, React__default.createElement("path", {
      d: "M8 2a1 1 0 000 2h2a1 1 0 100-2H8z"
    }), React__default.createElement("path", {
      d: "M3 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v6h-4.586l1.293-1.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L10.414 13H15v3a2 2 0 01-2 2H5a2 2 0 01-2-2V5zM15 11h2a1 1 0 110 2h-2v-2z"
    }))), sensitive && React__default.createElement("button", {
      onClick: function onClick() {
        return setShow(!show);
      },
      type: "button",
      className: classNames('absolute right-0 bg-white dark:bg-gray-800 top-[5px] p-1 mr-3 flex items-center justify-center text-gray-400 hover:text-gray-500 dark:text-white transition-all duration-200 rounded-md hover:bg-gray-100 focus:outline-none', canBeCopied ? 'mr-[35px]' : 'mr-[11px]'),
      "data-testid": "show-button"
    }, show ? React__default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: "h-5 w-5",
      viewBox: "0 0 20 20",
      fill: "currentColor"
    }, React__default.createElement("path", {
      fillRule: "evenodd",
      d: "M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z",
      clipRule: "evenodd"
    }), React__default.createElement("path", {
      d: "M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z"
    })) : React__default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: "h-5 w-5",
      viewBox: "0 0 20 20",
      fill: "currentColor"
    }, React__default.createElement("path", {
      d: "M10 12a2 2 0 100-4 2 2 0 000 4z"
    }), React__default.createElement("path", {
      fillRule: "evenodd",
      d: "M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z",
      clipRule: "evenodd"
    }))));
  }

  if (prepend || append) {
    return React__default.createElement("div", {
      className: classNames('relative flex rounded-md shadow-sm', props.className)
    }, prepend && React__default.createElement("span", {
      className: classNames('inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm', styles.dark)
    }, prepend), React__default.createElement(Input, Object.assign({}, props, {
      type: type,
      ref: ref,
      className: classNames('rounded-none', {
        'rounded-r-md': prepend && !append,
        'rounded-l-md': append && !prepend
      })
    })), append && React__default.createElement("span", {
      className: classNames('inline-flex items-center px-3 rounded-r-md border border-l-0 border-gray-300 bg-gray-50 text-gray-500 text-sm', styles.dark)
    }, append));
  }

  return React__default.createElement(Input, Object.assign({}, props, {
    type: type,
    ref: ref
  }));
});
var Input = /*#__PURE__*/React.forwardRef(function TextInput(_ref2, ref) {
  var _classNames, _classNames2;

  var _ref2$className = _ref2.className,
      className = _ref2$className === void 0 ? '' : _ref2$className,
      _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? 'text' : _ref2$type,
      _ref2$disabled = _ref2.disabled,
      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
      valid = _ref2.valid,
      other = _objectWithoutPropertiesLoose(_ref2, _excluded2);

  return React__default.createElement("input", Object.assign({
    className: classNames('w-full text-gray-600 border-gray-300 rounded-md sm:text-sm shadow-sm focus:ring-primary-400 focus:border-primary-400 placeholder-gray-400', styles.dark, {
      'cursor-not-allowed opacity-60 text-gray-500': disabled
    }, (_classNames = {}, _classNames[styles.valid] = valid !== undefined && valid, _classNames), (_classNames2 = {}, _classNames2[styles.invalid] = valid !== undefined && !valid, _classNames2), className),
    ref: ref,
    disabled: disabled,
    id: other.name,
    type: type
  }, other));
});

var Toast = function Toast(_ref) {
  var title = _ref.title,
      description = _ref.description,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'info' : _ref$type,
      id = _ref.id,
      _ref$autoClose = _ref.autoClose,
      autoClose = _ref$autoClose === void 0 ? true : _ref$autoClose,
      closeAfter = _ref.closeAfter,
      closeText = _ref.closeText,
      image = _ref.image;

  var _useState = React.useState(false),
      shouldShow = _useState[0],
      setShouldShow = _useState[1];

  var _useToast = useToast(),
      removeToast = _useToast.removeToast;

  React.useEffect(function () {
    if (!shouldShow) setShouldShow(true); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  React.useEffect(function () {
    if (autoClose || closeAfter) {
      var timer = setTimeout(function () {
        setShouldShow(false);
        setTimeout(function () {
          removeToast(id);
        }, 300);
      }, closeAfter || 4500);
      return function () {
        clearTimeout(timer);
      };
    }

    return;
  }, [id, removeToast, autoClose, closeAfter]);
  var icon = {
    info: React__default.createElement("svg", {
      className: "w-6 h-6 text-indigo-400",
      fill: "none",
      viewBox: "0 0 24 24",
      stroke: "currentColor",
      "data-testid": "icon"
    }, React__default.createElement("path", {
      d: "M13 16H12V12H11M12 8H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    })),
    success: React__default.createElement("svg", {
      className: "w-6 h-6 text-green-400",
      fill: "none",
      viewBox: "0 0 24 24",
      stroke: "currentColor",
      "data-testid": "icon"
    }, React__default.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: "2",
      d: "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
    })),
    warning: React__default.createElement("svg", {
      className: "w-6 h-6 text-yellow-500",
      fill: "none",
      viewBox: "0 0 24 24",
      stroke: "currentColor",
      "data-testid": "icon"
    }, React__default.createElement("path", {
      d: "M12 8V12M12 16H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    })),
    error: React__default.createElement("svg", {
      className: "w-6 h-6 text-red-400",
      fill: "none",
      viewBox: "0 0 24 24",
      stroke: "currentColor",
      "data-testid": "icon"
    }, React__default.createElement("path", {
      d: "M12 8V12M12 16H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }))
  };
  var borderStyle = {
    success: 'border-green-400',
    warning: 'border-yellow-500',
    error: 'border-red-400',
    info: 'border-indigo-400'
  };
  return React__default.createElement("div", {
    className: "flex items-end justify-center w-full px-4 pt-6 pointer-events-none top-2 right-2 sm:px-6 sm:items-start sm:justify-end",
    key: id
  }, React__default.createElement(react.Transition, {
    show: shouldShow,
    enter: "transform ease-out duration-300 transition",
    enterFrom: "translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2",
    enterTo: "translate-y-0 opacity-100 sm:translate-x-0",
    leave: "transition ease-in duration-200",
    leaveFrom: "opacity-100",
    leaveTo: "opacity-0",
    className: "w-full max-w-sm bg-white dark:bg-gray-800 border-l-2 rounded-md shadow-lg pointer-events-auto " + borderStyle[type],
    "data-testid": "toast"
  }, React__default.createElement("div", {
    className: "flex overflow-hidden rounded-lg shadow-xs"
  }, React__default.createElement("div", {
    className: "flex flex-col justify-center w-full p-3"
  }, React__default.createElement("div", {
    className: "flex items-start"
  }, React__default.createElement("div", {
    className: "flex-shrink-0"
  }, icon[type]), React__default.createElement("div", {
    className: "ml-2 w-0 flex-1 pt-0.5 overflow-hidden"
  }, React__default.createElement("p", {
    className: "text-sm font-medium leading-5 text-gray-900 dark:text-white"
  }, title), description ? React__default.createElement("p", {
    className: "mt-1 text-sm leading-5 text-gray-500 dark:text-gray-300"
  }, description) : null, image ? React__default.createElement("img", {
    src: image,
    alt: "toast",
    className: "mt-2 rounded-md"
  }) : null))), React__default.createElement("div", {
    className: "flex border-l border-gray-200 dark:border-gray-700 group"
  }, React__default.createElement("button", {
    className: "flex items-center justify-center w-full p-3 text-sm font-medium text-gray-600 border border-transparent rounded-none rounded-r-lg hover:text-gray-500 focus:outline-none focus:ring-1 focus:ring-gray-300",
    onClick: function onClick() {
      return removeToast(id);
    },
    "data-testid": "remove"
  }, closeText ? React__default.createElement("span", null, closeText) : React__default.createElement("svg", {
    className: "text-gray-400 fill-current w-7 h-7 group-hover:text-gray-500 dark:text-gray-300 dark:group-hover:text-gray-100",
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: "22",
    height: "22"
  }, React__default.createElement("path", {
    d: "M16.24 14.83a1 1 0 0 1-1.41 1.41L12 13.41l-2.83 2.83a1 1 0 0 1-1.41-1.41L10.59 12 7.76 9.17a1 1 0 0 1 1.41-1.41L12 10.59l2.83-2.83a1 1 0 0 1 1.41 1.41L13.41 12l2.83 2.83z"
  })))))));
};

var _excluded$9 = ["label", "labelClassName"],
    _excluded2$1 = ["isEnabled", "isLoading", "hasIcons", "className", "onToggle"];
var Toggle = /*#__PURE__*/React.forwardRef(function Toggle(_ref, ref) {
  var label = _ref.label,
      _ref$labelClassName = _ref.labelClassName,
      labelClassName = _ref$labelClassName === void 0 ? '' : _ref$labelClassName,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$9);

  if (label) {
    return React__default.createElement(react.Switch.Group, {
      as: "div",
      className: "flex items-center"
    }, React__default.createElement(ToggleComponent, Object.assign({
      ref: ref
    }, props)), React__default.createElement(react.Switch.Label, {
      as: "span",
      className: "ml-3 text-gray-900 dark:text-white " + labelClassName
    }, label));
  }

  return React__default.createElement(ToggleComponent, Object.assign({}, props));
});
var ToggleComponent = /*#__PURE__*/React.forwardRef(function Toggle(_ref2, ref) {
  var _ref2$isEnabled = _ref2.isEnabled,
      isEnabled = _ref2$isEnabled === void 0 ? false : _ref2$isEnabled,
      _ref2$isLoading = _ref2.isLoading,
      isLoading = _ref2$isLoading === void 0 ? false : _ref2$isLoading,
      _ref2$hasIcons = _ref2.hasIcons,
      hasIcons = _ref2$hasIcons === void 0 ? false : _ref2$hasIcons,
      _ref2$className = _ref2.className,
      className = _ref2$className === void 0 ? '' : _ref2$className,
      onToggle = _ref2.onToggle,
      other = _objectWithoutPropertiesLoose(_ref2, _excluded2$1);

  return React__default.createElement(react.Switch, Object.assign({
    checked: isEnabled,
    onChange: onToggle,
    className: classNames('relative inline-flex flex-shrink-0 h-6 transition-colors duration-200 ease-in-out border-2 border-transparent rounded-full cursor-pointer w-11 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-200', {
      'bg-primary-600': isEnabled,
      'bg-gray-200': !isEnabled
    }, styles.dark, className),
    "aria-pressed": isEnabled,
    ref: ref
  }, other), React__default.createElement("span", {
    "data-testid": "toggler",
    className: classNames('pointer-events-none inline-block h-5 w-5 rounded-full bg-white dark:bg-gray-400 shadow transform ring-0 transition ease-in-out duration-700', {
      'translate-x-5': isEnabled,
      'translate-x-0': !isEnabled,
      'p-1': isLoading
    })
  }, isLoading ? React__default.createElement("svg", {
    "data-testid": "loading-icon",
    className: "h-3 w-3 text-gray-400 animate-spin",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24"
  }, React__default.createElement("circle", {
    className: "opacity-25",
    cx: "12",
    cy: "12",
    r: "10",
    stroke: "currentColor",
    strokeWidth: "4"
  }), React__default.createElement("path", {
    className: "opacity-75",
    fill: "currentColor",
    d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
  })) : null, hasIcons && !isLoading ? React__default.createElement(React.Fragment, null, React__default.createElement("span", {
    className: classNames(isEnabled ? 'opacity-0 ease-out duration-100' : 'opacity-100 ease-in duration-200', 'absolute inset-0 h-full w-full flex items-center justify-center transition-opacity'),
    "aria-hidden": "true",
    "data-testid": "disabled-icon"
  }, React__default.createElement("svg", {
    className: "h-3 w-3 text-gray-400 dark:text-gray-700",
    fill: "none",
    viewBox: "0 0 12 12"
  }, React__default.createElement("path", {
    d: "M4 8l2-2m0 0l2-2M6 6L4 4m2 2l2 2",
    stroke: "currentColor",
    strokeWidth: 2,
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }))), React__default.createElement("span", {
    className: classNames(isEnabled ? 'opacity-100 ease-in duration-200' : 'opacity-0 ease-out duration-100', 'absolute inset-0 h-full w-full flex items-center justify-center transition-opacity'),
    "aria-hidden": "true",
    "data-testid": "enabled-icon"
  }, React__default.createElement("svg", {
    className: "h-3 w-3 text-primary-600",
    fill: "currentColor",
    viewBox: "0 0 12 12"
  }, React__default.createElement("path", {
    d: "M3.707 5.293a1 1 0 00-1.414 1.414l1.414-1.414zM5 8l-.707.707a1 1 0 001.414 0L5 8zm4.707-3.293a1 1 0 00-1.414-1.414l1.414 1.414zm-7.414 2l2 2 1.414-1.414-2-2-1.414 1.414zm3.414 2l4-4-1.414-1.414-4 4 1.414 1.414z"
  })))) : null));
});

var _excluded$a = ["children", "text", "alignRight", "alignPointerRight", "styles"];
var Tooltip = function Tooltip(_ref) {
  var children = _ref.children,
      text = _ref.text,
      _ref$alignRight = _ref.alignRight,
      alignRight = _ref$alignRight === void 0 ? false : _ref$alignRight,
      _ref$alignPointerRigh = _ref.alignPointerRight,
      alignPointerRight = _ref$alignPointerRigh === void 0 ? false : _ref$alignPointerRigh,
      styles = _ref.styles,
      other = _objectWithoutPropertiesLoose(_ref, _excluded$a);

  if (!text) return React__default.createElement(React__default.Fragment, null, children);
  var ref = React.createRef();

  var handleMouseEnter = function handleMouseEnter() {
    var _ref$current;

    if (ref != null && (_ref$current = ref.current) != null && _ref$current.style) {
      ref.current.style.display = 'block';
      setTimeout(function () {
        var _ref$current2;

        if (ref != null && (_ref$current2 = ref.current) != null && _ref$current2.style) {
          ref.current.style.opacity = '1';
          ref.current.style.marginTop = '10px';
        }
      }, 100);
    }
  };

  var handleMouseLeave = function handleMouseLeave() {
    var _ref$current3;

    if (ref != null && (_ref$current3 = ref.current) != null && _ref$current3.style) {
      ref.current.style.opacity = '0';
      ref.current.style.marginTop = '0px';
      setTimeout(function () {
        var _ref$current4;

        if (ref != null && (_ref$current4 = ref.current) != null && _ref$current4.style) {
          ref.current.style.display = 'none';
        }
      }, 100);
    }
  };

  return React__default.createElement("div", Object.assign({
    className: "relative",
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    "data-testid": "tooltip-container"
  }, other), React__default.createElement("div", {
    className: classNames('absolute z-10 flex items-center px-3 py-2 text-sm text-gray-800 whitespace-no-wrap transition-all duration-150 bg-white border border-gray-200 rounded shadow-sm dark:text-gray-300 dark:border-gray-700 dark:bg-gray-800', {
      'right-0': alignRight
    }),
    style: _extends({
      top: '100%',
      opacity: 0,
      display: 'none'
    }, styles),
    "data-testid": "tooltip",
    ref: ref
  }, text, React__default.createElement("div", {
    className: classNames('absolute w-3 h-3 bg-white border-t border-l border-gray-200 dark:text-gray-300 dark:border-gray-700 dark:bg-gray-800', {
      'right-2': alignPointerRight || alignRight && !alignPointerRight,
      'left-2': !alignPointerRight
    }),
    "data-testid": "pointer",
    style: {
      top: '-7px',
      transform: 'rotate(45deg)'
    }
  })), children);
};

exports.Alert = Alert;
exports.Button = Button;
exports.Card = Card;
exports.CheckBox = CheckBox;
exports.Chip = Chip;
exports.DateInput = DateInput;
exports.Dropdown = Dropdown;
exports.Modal = Modal;
exports.ModalProvider = ModalProvider;
exports.Select = Select;
exports.TextArea = TextArea;
exports.TextInput = TextInput;
exports.Toast = Toast;
exports.ToastProvider = ToastProvider;
exports.Toggle = Toggle;
exports.Tooltip = Tooltip;
exports.useDebounce = useDebounce;
exports.useModal = useModal;
exports.useOutsideClick = useOutsideClick;
exports.usePrevious = usePrevious;
exports.useToast = useToast;
//# sourceMappingURL=components.cjs.development.js.map
